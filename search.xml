<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Focal Loss的理解]]></title>
    <url>%2F2019%2F09%2F26%2FFocal-Loss%E7%9A%84%E7%90%86%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[声明：这篇论文还未读，所以里面所有内容都是来自于各种网络大佬的理解，等自己读了论文后有待补充。 为什么要提出Focal-loss现在目标检测大概分为两种: one-stage和two-stage，one-stage虽然速度快，但是精度不如two-stage的，相反，two-stage虽然精度高，但是速度慢，后来Lin等人对于此问题的研究发现，one-stage的精度不高与训练时后景数据相比于前景数据少的多有很大原因，因此Lin等人通过对交叉熵损失函数进行修改，提了Focal-loss，即会特别关注某些Loss的意思。 论文分析了One-stage精度不高的原因 正负样本极度不均衡：anchor的生成是用类似于sliding-windows的方式，这会导致正负样本的比例接近1:1000，而且绝大多数负样本为“easy example”； 梯度优化过程中被easy example过度影响: 根据交叉熵损失函数，虽然easy example的Loss不高，但是数量多，所以在梯度优化时Loss函数会过度关注这些easy example，从而使得那些难以分类的类别得不到很好的训练。 对于Focal-loss 的理解 首先回顾一下交叉熵损失函数：其中是经过激活函数的输出，在0-1之间，所以普通的交叉熵就是正样本的输出概率越大，那么Loss就越小，对于负样本，输出概率越小，Loss就越小。 再看加了gama后的Loss函数：在加入了gama后，就对难易样本的loss有了区分，对于正样本而言，如果输出为0.9，那么表明这个样本是容易训练的，所以Loss就变得比原来小，如果输出是0.5，表明难以训练，所以Loss就大，所以就使得Loss函数更加关注难训练的样本，所以减少了easy example的影响，论文实验发现gama=2是最优的。 Focal-loss的最终版本：α的加入实际上是使交叉熵加权，α一般设置为类别比例的倒数或者直接设为超参数(人为设定)，这样使得正样本(数量少)得到Loss的重视，从而减少负样本的影响。 为什么Focal loss没有用在two-stage上 two-stage会在生成区域建议阶段来使用NMS，使得候选框大量减少，在此过程中，减少了大量的背景框； 训练时用minibatch的采样策略，比如Faster-rcnn使用正负样本为1:3，这实际上起到了α 的作用。 感谢 https://www.sogou.com/link?url=hedJjaC291OoAuWay7Ycy8qCqnS5BeBJZpR6MQDH4jecmW7u2WhTZknbb2GMMgFg6KnxECbDvSOfABNiu1prjGiLSQm6y_cjIxl1zdOoaQG8NQzjFsXswHMpU5R1W7o9LJ3yweXqb0A4XXtlfpMI6PAjn7Fnn5gA https://www.cnblogs.com/king-lps/p/9497836.html]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>Focal-Loss-OD</tag>
        <tag>待补充</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown 简单教程]]></title>
    <url>%2F2019%2F09%2F08%2FMarkdown%2F</url>
    <content type="text"><![CDATA[区块元素 标题Markdown支持两种标题的语法 1.类Setext 形式利用底线的形式，利用=(表示最高阶题)，-（表示第二阶题）， 任何数量的 = 和 - 都可以有效果，例如： 1234&gt; This is an H1&gt;=================&gt;This is an H2&gt;------------------ 2.类Atx形式则是利用#的数量从1到6来表示标题的阶，例如： 123&gt;# This is H1&gt;## This is H2&gt;###### This is H6 区块引用先断好行，然后在每行前加&gt;，例如： 1&gt;This is a blockquote 效果如下： This is a blockquote Markdown 也允许只在整个段落的第一行加 &gt; : 1&gt;This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. 效果如下： This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. 区块引用允许嵌套（引用内引用），根据层次不用加不同数量的&gt; ，例如： 1&gt;&gt;This is my House 效果如下： This is my House 引用区块也可以使用其他Markdown 语法，例如： 1234567&gt; ## This is H1&gt;&gt; 1. 这是第一行列表项&gt;&gt; 代码：&gt;&gt;（这里要有两个缩进）return shell_exec("echo $input | $markdown_script"); 效果如下： ##This is H11.这是第一行列表项 return shell_exec(&quot;echo $input | $markdown_script&quot;); 列表分为有序列表和无序列表 1.无序列表使用* + 或 - : 123* hhh+ jjj- kkk 效果如下： hhh jjj kkk 可以看出，三者等同 2.有序列表使用数字和一个英文句点：1.hhh2.jjj3.kkk 代码区块具体语法如下： 12345这是一个普通段落： int a; int b; c = a + b; 分割线1234**** * *- - ----------------------------- 效果如下： 效果都是一样的 区段元素 链接支持两种形式的链接语法，行内式和参考式这里仅介绍行内式语法简单为：[]+()[] 中为链接文字，() 中为网址链接例如： 12This is [an example](http://example.com/ "Title") inline link.[This link](http://example.net/) has no title attribute. 效果如下：This is an example inline link.This link has no title attribute. 强调文字用 * 或 _ 包围会变斜，用** 或 __ 包围会变粗例如： 1234*会变斜*_会变斜_**会变粗**__会变粗__ 效果如下：会变斜会变斜会变粗会变粗 代码如果要标记一小段行内代码，可以用` 把他包起来： 1Use the `cout&lt;&lt;sddsff;` function. 效果如下： Use the cout&lt;&lt;sddsff; function. 图片简单语法如下：！+ [图片的替代文字] + (网址)例如： 1![pkq!!!](2019-09-08-Markdown/pkq.jpg) 效果如下: 到目前为止，Markdown还没有办法指定图片的高和宽，可以用&lt;img&gt;标签 自动链接将链接用&lt;&gt;包起来例如： 1&lt;http://example.com/&gt; 效果如下：http://example.com/ 感谢 感谢http://www.markdown.cn/#code-blocks]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F09%2F07%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
